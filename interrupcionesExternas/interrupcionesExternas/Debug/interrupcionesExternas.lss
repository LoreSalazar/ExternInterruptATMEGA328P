
interrupcionesExternas.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000013a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000001ae  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001ae  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000220  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000762  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000069a  00000000  00000000  000009aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002d5  00000000  00000000  00001044  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000050  00000000  00000000  0000131c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003d0  00000000  00000000  0000136c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000e6  00000000  00000000  0000173c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001822  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__vector_2>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 9b 00 	jmp	0x136	; 0x136 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
int flag = 0;

int main(void)
{
	
    cli(); //Se desactivan todas las interrupciones globales
  90:	f8 94       	cli
	
	DDRD &=~ (1 << DDD3); //Se declara el pin 3 como entrada
  92:	8a b1       	in	r24, 0x0a	; 10
  94:	87 7f       	andi	r24, 0xF7	; 247
  96:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1 << PORTD3); //Pull-up activado
  98:	8b b1       	in	r24, 0x0b	; 11
  9a:	88 60       	ori	r24, 0x08	; 8
  9c:	8b b9       	out	0x0b, r24	; 11
	
	// ISC1n:?Interrupt Sense Control 1 [n = 1:0] (porque estamos usando la interrupción 1, de lo contrario
	// eligiriamos el ISC0n
	EICRA |= (1 << ISC11);
  9e:	e9 e6       	ldi	r30, 0x69	; 105
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	80 81       	ld	r24, Z
  a4:	88 60       	ori	r24, 0x08	; 8
  a6:	80 83       	st	Z, r24
	EICRA &=~ (1 << ISC10);
  a8:	80 81       	ld	r24, Z
  aa:	8b 7f       	andi	r24, 0xFB	; 251
  ac:	80 83       	st	Z, r24
	
	// INT1:?External Interrupt Request 1 Enable
	EIMSK |= (1 << INT1); //Se habilita la interrupción 1
  ae:	8d b3       	in	r24, 0x1d	; 29
  b0:	82 60       	ori	r24, 0x02	; 2
  b2:	8d bb       	out	0x1d, r24	; 29
	
	DDRB |= (1 << DDB5); //Se declara el pin 7 como salida
  b4:	84 b1       	in	r24, 0x04	; 4
  b6:	80 62       	ori	r24, 0x20	; 32
  b8:	84 b9       	out	0x04, r24	; 4
	
	sei(); //Se activan todas las interrupciones globales
  ba:	78 94       	sei
  bc:	ff cf       	rjmp	.-2      	; 0xbc <main+0x2c>

000000be <__vector_2>:
    {
	}
	
}

ISR(INT1_vect){ //Solicitud de interrupción externa 1 (CONSULTAR: https://ece--classes-usc-edu.translate.goog/ee459/library/documents/avr_intr_vectors/?_x_tr_sl=en&_x_tr_tl=es&_x_tr_hl=es&_x_tr_pto=tc)
  be:	1f 92       	push	r1
  c0:	0f 92       	push	r0
  c2:	0f b6       	in	r0, 0x3f	; 63
  c4:	0f 92       	push	r0
  c6:	11 24       	eor	r1, r1
  c8:	2f 93       	push	r18
  ca:	8f 93       	push	r24
  cc:	9f 93       	push	r25
	
	for(flag = 0; flag < 20; flag++){
  ce:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  d2:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
  d6:	21 c0       	rjmp	.+66     	; 0x11a <__vector_2+0x5c>
		
		PORTB |= (1 << PORTB5);
  d8:	85 b1       	in	r24, 0x05	; 5
  da:	80 62       	ori	r24, 0x20	; 32
  dc:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  de:	2f ef       	ldi	r18, 0xFF	; 255
  e0:	89 e6       	ldi	r24, 0x69	; 105
  e2:	98 e1       	ldi	r25, 0x18	; 24
  e4:	21 50       	subi	r18, 0x01	; 1
  e6:	80 40       	sbci	r24, 0x00	; 0
  e8:	90 40       	sbci	r25, 0x00	; 0
  ea:	e1 f7       	brne	.-8      	; 0xe4 <__vector_2+0x26>
  ec:	00 c0       	rjmp	.+0      	; 0xee <__vector_2+0x30>
  ee:	00 00       	nop
		_delay_ms(500);
		PORTB &=~ (1 << PORTB5);
  f0:	85 b1       	in	r24, 0x05	; 5
  f2:	8f 7d       	andi	r24, 0xDF	; 223
  f4:	85 b9       	out	0x05, r24	; 5
  f6:	2f ef       	ldi	r18, 0xFF	; 255
  f8:	89 e6       	ldi	r24, 0x69	; 105
  fa:	98 e1       	ldi	r25, 0x18	; 24
  fc:	21 50       	subi	r18, 0x01	; 1
  fe:	80 40       	sbci	r24, 0x00	; 0
 100:	90 40       	sbci	r25, 0x00	; 0
 102:	e1 f7       	brne	.-8      	; 0xfc <__vector_2+0x3e>
 104:	00 c0       	rjmp	.+0      	; 0x106 <__vector_2+0x48>
 106:	00 00       	nop
		_delay_ms(500);
			
		flag += 1;
 108:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 10c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
	
}

ISR(INT1_vect){ //Solicitud de interrupción externa 1 (CONSULTAR: https://ece--classes-usc-edu.translate.goog/ee459/library/documents/avr_intr_vectors/?_x_tr_sl=en&_x_tr_tl=es&_x_tr_hl=es&_x_tr_pto=tc)
	
	for(flag = 0; flag < 20; flag++){
 110:	02 96       	adiw	r24, 0x02	; 2
 112:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 116:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 11a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 11e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 122:	44 97       	sbiw	r24, 0x14	; 20
 124:	cc f2       	brlt	.-78     	; 0xd8 <__vector_2+0x1a>
		_delay_ms(500);
			
		flag += 1;
	}
	
}
 126:	9f 91       	pop	r25
 128:	8f 91       	pop	r24
 12a:	2f 91       	pop	r18
 12c:	0f 90       	pop	r0
 12e:	0f be       	out	0x3f, r0	; 63
 130:	0f 90       	pop	r0
 132:	1f 90       	pop	r1
 134:	18 95       	reti

00000136 <_exit>:
 136:	f8 94       	cli

00000138 <__stop_program>:
 138:	ff cf       	rjmp	.-2      	; 0x138 <__stop_program>
